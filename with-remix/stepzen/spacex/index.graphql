"""
select columns of table "users"
"""
enum Spacex_Users_Select_Column {
  """
  column name
  """
  id
  """
  column name
  """
  name
  """
  column name
  """
  rocket
  """
  column name
  """
  timestamp
  """
  column name
  """
  twitter
}

"""
ordering options when selecting data from "users"
"""
input Spacex_Users_Order_By {
  id: Spacex_Order_By
  name: Spacex_Order_By
  rocket: Spacex_Order_By
  timestamp: Spacex_Order_By
  twitter: Spacex_Order_By
}

"""
column ordering options
"""
enum Spacex_Order_By {
  """
  in the ascending order, nulls last
  """
  asc
  """
  in the ascending order, nulls first
  """
  asc_nulls_first
  """
  in the ascending order, nulls last
  """
  asc_nulls_last
  """
  in the descending order, nulls first
  """
  desc
  """
  in the descending order, nulls first
  """
  desc_nulls_first
  """
  in the descending order, nulls last
  """
  desc_nulls_last
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input Spacex_users_bool_exp {
  _and: [Spacex_users_bool_exp]
  _not: Spacex_users_bool_exp
  _or: [Spacex_users_bool_exp]
  id: Spacex_Uuid_Comparison_Exp
  name: Spacex_String_Comparison_Exp
  rocket: Spacex_String_Comparison_Exp
  timestamp: Spacex_Timestamptz_Comparison_Exp
  twitter: Spacex_String_Comparison_Exp
}

"""
expression to compare columns of type uuid. All fields are combined with logical 'AND'.
"""
input Spacex_Uuid_Comparison_Exp {
  _eq: Spacex_uuid
  _gt: Spacex_uuid
  _gte: Spacex_uuid
  _in: [Spacex_uuid!]
  _is_null: Boolean
  _lt: Spacex_uuid
  _lte: Spacex_uuid
  _neq: Spacex_uuid
  _nin: [Spacex_uuid!]
}

"""
custom scalar for uuid
"""
scalar Spacex_uuid

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input Spacex_String_Comparison_Exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input Spacex_Timestamptz_Comparison_Exp {
  _eq: Spacex_timestamptz
  _gt: Spacex_timestamptz
  _gte: Spacex_timestamptz
  _in: [Spacex_timestamptz!]
  _is_null: Boolean
  _lt: Spacex_timestamptz
  _lte: Spacex_timestamptz
  _neq: Spacex_timestamptz
  _nin: [Spacex_timestamptz!]
}

"""
custom scalar for Spacex time stamps
"""
scalar Spacex_timestamptz

"""
columns and relationships of "users"
"""
type Spacex_users {
  id: Spacex_uuid!
  name: String
  rocket: String
  timestamp: Spacex_timestamptz!
  twitter: String
}

"""
aggregated selection of "users"
"""
type Spacex_users_aggregate {
  aggregate: Spacex_users_aggregate_fields
  nodes: [Spacex_users!]!
}

"""
aggregate fields of "users"
"""
type Spacex_users_aggregate_fields {
  count(columns: [Spacex_Users_Select_Column!], distinct: Boolean): Int
  max: Spacex_users_max_fields
  min: Spacex_users_min_fields
}

"""
aggregate max on columns
"""
type Spacex_users_max_fields {
  name: String
  rocket: String
  timestamp: Spacex_timestamptz
  twitter: String
}

"""
aggregate min on columns
"""
type Spacex_users_min_fields {
  name: String
  rocket: String
  timestamp: Spacex_timestamptz
  twitter: String
}

"""
input for finding Spacex capsules
"""
input Spacex_CapsulesFind {
  id: ID
  landings: Int
  mission: String
  original_launch: DateTime
  reuse_count: Int
  status: String
  type: String
}

"""
type Spacex capsule
"""
type Spacex_Capsule {
  id: ID
  landings: Int
  missions: [Spacex_CapsuleMission]
  original_launch: DateTime
  reuse_count: Int
  status: String
  type: String
  dragon: Spacex_Dragon
}

"""
type Spacex capsule mission
"""
type Spacex_CapsuleMission {
  flight: Int
  name: String
}

"""
type Spacex dragon
"""
type Spacex_Dragon {
  active: Boolean
  crew_capacity: Int
  description: String
  diameter: Spacex_Distance
  dry_mass_kg: Int
  dry_mass_lb: Int
  first_flight: String
  heat_shield: Spacex_DragonHeatShield
  height_w_trunk: Spacex_Distance
  id: ID
  launch_payload_mass: Spacex_Mass
  launch_payload_vol: Spacex_Volume
  name: String
  orbit_duration_yr: Int
  pressurized_capsule: Spacex_DragonPressurizedCapsule
  return_payload_mass: Spacex_Mass
  return_payload_vol: Spacex_Volume
  sidewall_angle_deg: Float
  thrusters: [Spacex_DragonThrust]
  trunk: Spacex_DragonTrunk
  type: String
  wikipedia: String
}

"""
type Spacex distance
"""
type Spacex_Distance {
  feet: Float
  meters: Float
}

"""
type Spacex dragon heat shield
"""
type Spacex_DragonHeatShield {
  dev_partner: String
  material: String
  size_meters: Float
  temp_degrees: Int
}

"""
type Spacex mass
"""
type Spacex_Mass {
  kg: Int
  lb: Int
}

"""
type Spacex volume
"""
type Spacex_Volume {
  cubic_feet: Int
  cubic_meters: Int
}

"""
type Spacex dragon pressurized capsule
"""
type Spacex_DragonPressurizedCapsule {
  payload_volume: Spacex_Volume
}

"""
type Spacex dragon thrust
"""
type Spacex_DragonThrust {
  amount: Int
  fuel_1: String
  fuel_2: String
  pods: Int
  thrust: Spacex_Force
  type: String
}

"""
type Spacex force
"""
type Spacex_Force {
  kN: Float
  lbf: Float
}

"""
type Spacex dragon trunk
"""
type Spacex_DragonTrunk {
  cargo: Spacex_DragonTrunkCargo
  trunk_volume: Spacex_Volume
}

"""
type returning data for Spacex dragon trunk cargo
"""
type Spacex_DragonTrunkCargo {
  solar_array: Int
  unpressurized_cargo: Boolean
}

"""
type returning data for Spacex info
"""
type Spacex_Info {
  ceo: String
  coo: String
  cto_propulsion: String
  cto: String
  employees: Int
  founded: Int
  founder: String
  headquarters: Spacex_Address
  launch_sites: Int
  links: Spacex_InfoLinks
  name: String
  summary: String
  test_sites: Int
  valuation: Float
  vehicles: Int
}

"""
type returning data for Spacex address
"""
type Spacex_Address {
  address: String
  city: String
  state: String
}

"""
type returning data for Spacex info links
"""
type Spacex_InfoLinks {
  elon_twitter: String
  flickr: String
  twitter: String
  website: String
}

"""
input for Spacex cores find
"""
input Spacex_CoresFind {
  asds_attempts: Int
  asds_landings: Int
  block: Int
  id: String
  missions: String
  original_launch: DateTime
  reuse_count: Int
  rtls_attempts: Int
  rtls_landings: Int
  status: String
  water_landing: Boolean
}

"""
type Spacex core
"""
type Spacex_Core {
  asds_attempts: Int
  asds_landings: Int
  block: Int
  id: ID
  missions: [Spacex_CapsuleMission]
  original_launch: DateTime
  reuse_count: Int
  rtls_attempts: Int
  rtls_landings: Int
  status: String
  water_landing: Boolean
}

"""
input for history find
"""
input Spacex_HistoryFind {
  end: DateTime
  flight_number: Int
  id: ID
  start: DateTime
}

"""
type returning data for Spacex history
"""
type Spacex_History {
  details: String
  event_date_unix: DateTime
  event_date_utc: DateTime
  id: ID
  links: Spacex_Link
  title: String
  flight: Spacex_Launch
}

"""
type returning data for Spacex link
"""
type Spacex_Link {
  article: String
  reddit: String
  wikipedia: String
}

"""
type returning data for Spacex launch
"""
type Spacex_Launch {
  details: String
  id: ID
  is_tentative: Boolean
  launch_date_local: DateTime
  launch_date_unix: DateTime
  launch_date_utc: DateTime
  launch_site: Spacex_LaunchSite
  launch_success: Boolean
  launch_year: String
  links: Spacex_LaunchLinks
  mission_id: [String]
  mission_name: String
  rocket: Spacex_LaunchRocket
  static_fire_date_unix: DateTime
  static_fire_date_utc: DateTime
  telemetry: Spacex_LaunchTelemetry
  tentative_max_precision: String
  upcoming: Boolean
  ships: [Spacex_Ship]
}

"""
type returning data for Spacex launch site
"""
type Spacex_LaunchSite {
  site_id: String
  site_name_long: String
  site_name: String
}

"""
type returning data for Spacex launch links
"""
type Spacex_LaunchLinks {
  article_link: String
  flickr_images: [String]
  mission_patch_small: String
  mission_patch: String
  presskit: String
  reddit_campaign: String
  reddit_launch: String
  reddit_media: String
  reddit_recovery: String
  video_link: String
  wikipedia: String
}

"""
type returning data for Spacex launch rocket
"""
type Spacex_LaunchRocket {
  fairings: Spacex_LaunchRocketFairings
  first_stage: Spacex_LaunchRocketFirstStage
  rocket_name: String
  rocket_type: String
  rocket: Spacex_Rocket
  second_stage: Spacex_LaunchRocketSecondStage
}

"""
type returning data for Spacex launch rocket fairings
"""
type Spacex_LaunchRocketFairings {
  recovered: Boolean
  recovery_attempt: Boolean
  reused: Boolean
  ship: String
}

"""
type returning data on cores for Spacex launch rocket at first stage
"""
type Spacex_LaunchRocketFirstStage {
  cores: [Spacex_LaunchRocketFirstStageCore]
}

"""
type returning data for launch rocket at first stage
"""
type Spacex_LaunchRocketFirstStageCore {
  block: Int
  core: Spacex_Core
  flight: Int
  gridfins: Boolean
  land_success: Boolean
  landing_intent: Boolean
  landing_type: String
  landing_vehicle: String
  legs: Boolean
  reused: Boolean
}

"""
type returning data for Spacex rocket
"""
type Spacex_Rocket {
  active: Boolean
  boosters: Int
  company: String
  cost_per_launch: Int
  country: String
  description: String
  diameter: Spacex_Distance
  engines: Spacex_RocketEngines
  first_flight: DateTime
  first_stage: Spacex_RocketFirstStage
  height: Spacex_Distance
  id: ID
  landing_legs: Spacex_RocketLandingLegs
  mass: Spacex_Mass
  name: String
  payload_weights: [Spacex_RocketPayloadWeight]
  second_stage: Spacex_RocketSecondStage
  stages: Int
  success_rate_pct: Int
  type: String
  wikipedia: String
}

"""
type returning data for Spacex rocket engines
"""
type Spacex_RocketEngines {
  number: Int
  type: String
  version: String
  layout: String
  engine_loss_max: String
  propellant_1: String
  propellant_2: String
  thrust_sea_level: Spacex_Force
  thrust_vacuum: Spacex_Force
  thrust_to_weight: Float
}

"""
type returning data for Spacex rocket first stage
"""
type Spacex_RocketFirstStage {
  burn_time_sec: Int
  engines: Int
  fuel_amount_tons: Float
  reusable: Boolean
  thrust_sea_level: Spacex_Force
  thrust_vacuum: Spacex_Force
}

"""
type returning data for Spacex rocket landing legs
"""
type Spacex_RocketLandingLegs {
  number: Int
  material: String
}

"""
type returning data on Spacex rocket payload weight
"""
type Spacex_RocketPayloadWeight {
  id: String
  kg: Int
  lb: Int
  name: String
}

"""
type defining data returned for Spacex rocket at second stage
"""
type Spacex_RocketSecondStage {
  burn_time_sec: Int
  engines: Int
  fuel_amount_tons: Float
  payloads: Spacex_RocketSecondStagePayloads
  thrust: Spacex_Force
}

"""
type defining Spacex rocket second stage payloads
"""
type Spacex_RocketSecondStagePayloads {
  option_1: String
  composite_fairing: Spacex_RocketSecondStagePayloadCompositeFairing
}

"""
type defining data returned for Spacex second stage payload with composite fairing
"""
type Spacex_RocketSecondStagePayloadCompositeFairing {
  height: Spacex_Distance
  diameter: Spacex_Distance
}

"""
type defining data returned for Spacex launch rocket second stage
"""
type Spacex_LaunchRocketSecondStage {
  block: Int
  payloads: [Spacex_Payload]
}

"""
type defining data returned for Spacex payload
"""
type Spacex_Payload {
  customers: [String]
  id: ID
  manufacturer: String
  nationality: String
  norad_id: [Int]
  orbit_params: Spacex_PayloadOrbitParams
  orbit: String
  payload_mass_kg: Float
  payload_mass_lbs: Float
  payload_type: String
  reused: Boolean
}

"""
type defining payload for orbit params
"""
type Spacex_PayloadOrbitParams {
  apoapsis_km: Float
  arg_of_pericenter: Float
  eccentricity: Float
  epoch: DateTime
  inclination_deg: Float
  lifespan_years: Float
  longitude: Float
  mean_anomaly: Float
  mean_motion: Float
  periapsis_km: Float
  period_min: Float
  raan: Float
  reference_system: String
  regime: String
  semi_major_axis_km: Float
}

"""
type returning flight_club for launch telemetry
"""
type Spacex_LaunchTelemetry {
  flight_club: String
}

"""
type defining data returned for Spacex ship
"""
type Spacex_Ship {
  abs: Int
  active: Boolean
  attempted_landings: Int
  class: Int
  course_deg: Int
  home_port: String
  id: ID
  image: String
  imo: Int
  missions: [Spacex_ShipMission]
  mmsi: Int
  model: String
  name: String
  position: Spacex_ShipLocation
  roles: [String]
  speed_kn: Float
  status: String
  successful_landings: Int
  type: String
  url: String
  weight_kg: Int
  weight_lbs: Int
  year_built: Int
}

"""
type defininf Spacex ship mission with flight and name
"""
type Spacex_ShipMission {
  flight: String
  name: String
}

"""
type defining lat and long for ship location
"""
type Spacex_ShipLocation {
  latitude: Float
  longitude: Float
}

"""
type defining histories result and data
"""
type Spacex_HistoriesResult {
  result: Spacex_Result
  data: [Spacex_History]
}

"""
type defining Spacex result returning totalCount
"""
type Spacex_Result {
  totalCount: Int
}

"""
type defining data returned for Spacex landpad
"""
type Spacex_Landpad {
  attempted_landings: String
  details: String
  full_name: String
  id: ID
  landing_type: String
  location: Spacex_Location
  status: String
  successful_landings: String
  wikipedia: String
}

"""
type defining data returned for Spacex location
"""
type Spacex_Location {
  latitude: Float
  longitude: Float
  name: String
  region: String
}

"""
input defining data for launch find
"""
input Spacex_LaunchFind {
  apoapsis_km: Float
  block: Int
  cap_serial: String
  capsule_reuse: String
  core_flight: Int
  core_reuse: String
  core_serial: String
  customer: String
  eccentricity: Float
  end: DateTime
  epoch: DateTime
  fairings_recovered: String
  fairings_recovery_attempt: String
  fairings_reuse: String
  fairings_reused: String
  fairings_ship: String
  gridfins: String
  id: ID
  inclination_deg: Float
  land_success: String
  landing_intent: String
  landing_type: String
  landing_vehicle: String
  launch_date_local: DateTime
  launch_date_utc: DateTime
  launch_success: String
  launch_year: String
  legs: String
  lifespan_years: Float
  longitude: Float
  manufacturer: String
  mean_motion: Float
  mission_id: String
  mission_name: String
  nationality: String
  norad_id: Int
  orbit: String
  payload_id: String
  payload_type: String
  periapsis_km: Float
  period_min: Float
  raan: Float
  reference_system: String
  regime: String
  reused: String
  rocket_id: String
  rocket_name: String
  rocket_type: String
  second_stage_block: String
  semi_major_axis_km: Float
  ship: String
  side_core1_reuse: String
  side_core2_reuse: String
  site_id: String
  site_name_long: String
  site_name: String
  start: DateTime
  tbd: String
  tentative_max_precision: String
  tentative: String
}

"""
type defining Spacex laucnhes past result and data
"""
type Spacex_LaunchesPastResult {
  result: Spacex_Result
  data: [Spacex_Launch]
}

"""
type defining data returned for Spacex launchpad
"""
type Spacex_Launchpad {
  attempted_launches: Int
  details: String
  id: ID
  location: Spacex_Location
  name: String
  status: String
  successful_launches: Int
  vehicles_launched: [Spacex_Rocket]
  wikipedia: String
}

"""
input type for Spacex missions with id, name, manufacturer and payload id
"""
input Spacex_MissionsFind {
  id: ID
  manufacturer: String
  name: String
  payload_id: String
}

"""
type defining data returned for Spacex mission
"""
type Spacex_Mission {
  description: String
  id: ID
  manufacturers: [String]
  name: String
  twitter: String
  website: String
  wikipedia: String
  payloads: [Spacex_Payload]
}

"""
mission result type with data
"""
type Spacex_MissionResult {
  result: Spacex_Result
  data: [Spacex_Mission]
}

"""
payloads find type
"""
input Spacex_PayloadsFind {
  apoapsis_km: Float
  customer: String
  eccentricity: Float
  epoch: DateTime
  inclination_deg: Float
  lifespan_years: Float
  longitude: Float
  manufacturer: String
  mean_motion: Float
  nationality: String
  norad_id: Int
  orbit: String
  payload_id: ID
  payload_type: String
  periapsis_km: Float
  period_min: Float
  raan: Float
  reference_system: String
  regime: String
  reused: Boolean
  semi_major_axis_km: Float
}

"""
roadster type
"""
type Spacex_Roadster {
  apoapsis_au: Float
  details: String
  earth_distance_km: Float
  earth_distance_mi: Float
  eccentricity: Float
  epoch_jd: Float
  inclination: Float
  launch_date_unix: DateTime
  launch_date_utc: DateTime
  launch_mass_kg: Int
  launch_mass_lbs: Int
  longitude: Float
  mars_distance_km: Float
  mars_distance_mi: Float
  name: String
  norad_id: Int
  orbit_type: Float
  periapsis_arg: Float
  periapsis_au: Float
  period_days: Float
  semi_major_axis_au: Float
  speed_kph: Float
  speed_mph: Float
  wikipedia: String
}

"""
type defining rockets result and data
"""
type Spacex_RocketsResult {
  result: Spacex_Result
  data: [Spacex_Rocket]
}

"""
input type for ships
"""
input Spacex_ShipsFind {
  id: ID
  name: String
  model: String
  type: String
  role: String
  active: Boolean
  imo: Int
  mmsi: Int
  abs: Int
  class: Int
  weight_lbs: Int
  weight_kg: Int
  year_built: Int
  home_port: String
  status: String
  speed_kn: Int
  course_deg: Int
  latitude: Float
  longitude: Float
  successful_landings: Int
  attempted_landings: Int
  mission: String
}

"""
type defining result and data for ships
"""
type Spacex_ShipsResult {
  result: Spacex_Result
  data: [Spacex_Ship]
}

"""
response of any mutation on the table "users"
"""
type Spacex_users_mutation_response {
  """
  number of affected rows by the mutation
  """
  affected_rows: Int!
  """
  data of the affected rows by the mutation
  """
  returning: [Spacex_users!]!
}

"""
input type for inserting data into table "users"
"""
input Spacex_Users_Insert_Input {
  id: Spacex_uuid
  name: String
  rocket: String
  timestamp: Spacex_timestamptz
  twitter: String
}

"""
on conflict condition type for table "users"
"""
input Spacex_users_on_conflict {
  constraint: Spacex_Users_Constraint!
  update_columns: [Spacex_Users_Update_Column!]!
}

"""
unique or primary key constraints on table "users"
"""
enum Spacex_Users_Constraint {
  """
  unique or primary key constraint
  """
  users_pkey
}

"""
update columns of table "users"
"""
enum Spacex_Users_Update_Column {
  """
  column name
  """
  id
  """
  column name
  """
  name
  """
  column name
  """
  rocket
  """
  column name
  """
  timestamp
  """
  column name
  """
  twitter
}

"""
input type for updating data in table "users"
"""
input Spacex_Users_Set_Input {
  id: Spacex_uuid
  name: String
  rocket: String
  timestamp: Spacex_timestamptz
  twitter: String
}

"""
conflict action
"""
enum Spacex_Conflict_Action {
  """
  ignore the insert on this row
  """
  ignore
  """
  update the row with the given values
  """
  update
}

"""
order by aggregate values of table "users"
"""
input Spacex_Users_Aggregate_Order_By {
  count: Spacex_Order_By
  max: Spacex_Users_Max_Order_By
  min: Spacex_Users_Min_Order_By
}

"""
order by max() on columns of table "users"
"""
input Spacex_Users_Max_Order_By {
  name: Spacex_Order_By
  rocket: Spacex_Order_By
  timestamp: Spacex_Order_By
  twitter: Spacex_Order_By
}

"""
order by min() on columns of table "users"
"""
input Spacex_Users_Min_Order_By {
  name: Spacex_Order_By
  rocket: Spacex_Order_By
  timestamp: Spacex_Order_By
  twitter: Spacex_Order_By
}

"""
input type for inserting array relation for remote table "users"
"""
input Spacex_Users_Arr_Rel_Insert_Input {
  data: [Spacex_Users_Insert_Input!]!
  on_conflict: Spacex_users_on_conflict
}

"""
input type for inserting object relation for remote table "users"
"""
input Spacex_Users_Obj_Rel_Insert_Input {
  data: Spacex_Users_Insert_Input!
  on_conflict: Spacex_users_on_conflict
}

"""
custom scalar object ID
"""
scalar Spacex_ObjectID
"""
core mission type defining name and flight
"""
type Spacex_CoreMission {
  name: String
  flight: Int
}
type Query {
  """
  fetch data on Spacex capsules
  """
  spacex_capsules(
    find: Spacex_CapsulesFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Spacex_Capsule]
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for past capsules
  """
  spacex_capsulesPast(
    find: Spacex_CapsulesFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Spacex_Capsule]
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for upcoming capsules
  """
  spacex_capsulesUpcoming(
    find: Spacex_CapsulesFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Spacex_Capsule]
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for capsule by id
  """
  spacex_capsule(id: ID!): Spacex_Capsule
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for company
  """
  spacex_company: Spacex_Info
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for cores
  """
  spacex_cores(
    find: Spacex_CoresFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Spacex_Core]
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for past cores
  """
  spacex_coresPast(
    find: Spacex_CoresFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Spacex_Core]
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for upcoming cores
  """
  spacex_coresUpcoming(
    find: Spacex_CoresFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Spacex_Core]
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for core by id
  """
  spacex_core(id: ID!): Spacex_Core
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for dragons
  """
  spacex_dragons(limit: Int, offset: Int): [Spacex_Dragon]
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for dragon by id
  """
  spacex_dragon(id: ID!): Spacex_Dragon
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for histories
  """
  spacex_histories(
    find: Spacex_HistoryFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Spacex_History]
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for result of histories
  """
  spacex_historiesResult(
    find: Spacex_HistoryFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): Spacex_HistoriesResult
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for history by id
  """
  spacex_history(id: ID!): Spacex_History
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for launchpads
  """
  spacex_landpads(limit: Int, offset: Int): [Spacex_Landpad]
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )

  """
  fetch data for landpad by id
  """
  spacex_landpad(id: ID!): Spacex_Landpad
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for launches
  """
  spacex_launches(
    find: Spacex_LaunchFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Spacex_Launch]
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for past launches
  """
  spacex_launchesPast(
    find: Spacex_LaunchFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Spacex_Launch]
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for past result of launches
  """
  spacex_launchesPastResult(
    find: Spacex_LaunchFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): Spacex_LaunchesPastResult
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for upcoming launches
  """
  spacex_launchesUpcoming(
    find: Spacex_LaunchFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Spacex_Launch]
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for launch by id
  """
  spacex_launch(id: ID!): Spacex_Launch
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for latest launch
  """
  spacex_launchLatest(offset: Int): Spacex_Launch
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for next launch
  """
  spacex_launchNext(offset: Int): Spacex_Launch
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for launch pads
  """
  spacex_launchpads(limit: Int, offset: Int): [Spacex_Launchpad]
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for launchpad by id
  """
  spacex_launchpad(id: ID!): Spacex_Launchpad
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for missions
  """
  spacex_missions(
    find: Spacex_MissionsFind
    limit: Int
    offset: Int
  ): [Spacex_Mission]
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for missions result
  """
  spacex_missionsResult(
    find: Spacex_MissionsFind
    limit: Int
    offset: Int
  ): Spacex_MissionResult
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for mission id
  """
  spacex_mission(id: ID!): Spacex_Mission
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for payloads
  """
  spacex_payloads(
    find: Spacex_PayloadsFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Spacex_Payload]
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for payload by id
  """
  spacex_payload(id: ID!): Spacex_Payload
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for roadsters
  """
  spacex_roadster: Spacex_Roadster
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for rockets
  """
  spacex_rockets(limit: Int, offset: Int): [Spacex_Rocket]
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for result of rockets
  """
  spacex_rocketsResult(limit: Int, offset: Int): Spacex_RocketsResult
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for rockets by id
  """
  spacex_rocket(id: ID!): Spacex_Rocket
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for ships
  """
  spacex_ships(
    find: Spacex_ShipsFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Spacex_Ship]
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for ships result
  """
  spacex_shipsResult(
    find: Spacex_ShipsFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): Spacex_ShipsResult
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data for ship by id
  """
  spacex_ship(id: ID!): Spacex_Ship
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data from the table: "users"
  """
  spacex_users(
    distinct_on: [Spacex_Users_Select_Column!]
    limit: Int
    offset: Int
    order_by: [Spacex_Users_Order_By!]
    where: Spacex_users_bool_exp
  ): [Spacex_users!]!
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch aggregated fields from the table: "users"
  """
  spacex_users_aggregate(
    distinct_on: [Spacex_Users_Select_Column!]
    limit: Int
    offset: Int
    order_by: [Spacex_Users_Order_By!]
    where: Spacex_users_bool_exp
  ): Spacex_users_aggregate!
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
  """
  fetch data from the table: "users" using primary key columns
  """
  spacex_users_by_pk(id: Spacex_uuid!): Spacex_users
    @graphql(
      endpoint: "https://api.spacex.land/graphql"
      prefix: { value: "spacex_", includeRootOperations: true }
    )
}

type Mutation {
  """
  delete data from the table: "users"
  """
  spacex_Delete_Users(
    """
    filter the rows which have to be deleted
    """
    where: Spacex_users_bool_exp!
  ): Spacex_users_mutation_response
    @graphql(
      endpoint: "https://api.Spacex.land/graphql"
      prefix: { value: "Spacex_", includeRootOperations: true }
    )
  """
  insert data into the table: "users"
  """
  spacex_Insert_Users(
    """
    the rows to be inserted
    """
    objects: [Spacex_Users_Insert_Input!]!
    """
    on conflict condition
    """
    on_conflict: Spacex_users_on_conflict
  ): Spacex_users_mutation_response
    @graphql(
      endpoint: "https://api.Spacex.land/graphql"
      prefix: { value: "Spacex_", includeRootOperations: true }
    )
  """
  update data of the table: "users"
  """
  spacex_Update_Users(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: Spacex_Users_Set_Input
    """
    filter the rows which have to be updated
    """
    where: Spacex_users_bool_exp!
  ): Spacex_users_mutation_response
    @graphql(
      endpoint: "https://api.Spacex.land/graphql"
      prefix: { value: "Spacex_", includeRootOperations: true }
    )
}

type Item {
  kids: [Int]
  parts: [Int]

  id: Int
  time: Int
  poll: Int
  score: Int
  parent: Int
  descendants: Int

  by: String
  url: String
  type: String
  text: String
  title: String
}

type User {
  submitted: [Int]

  id: String
  about: String

  karma: Int
  created: Int
}

enum StoriesType {
  TOP = "topstories",
  NEW,
  BEST,
  ASK,
  SHOW,
  JOB
}

type Query {
  item(id: String = "1"): Item
    @rest(endpoint: "https://hacker-news.firebaseio.com/v0/item/$id.json"),

  user(username: String = "jl"): User
    @rest(endpoint: "https://hacker-news.firebaseio.com/v0/user/$username.json")

  stories(types: StoriesType!): [Int]
    @rest(endpoint: "https://hacker-news.firebaseio.com/v0/$types.json")

  topstories: [Int]
    @rest(endpoint: "https://hacker-news.firebaseio.com/v0/topstories.json")

  newstories: [Int]
    @rest(endpoint: "https://hacker-news.firebaseio.com/v0/newstories.json")

  beststories: [Int]
    @rest(endpoint: "https://hacker-news.firebaseio.com/v0/beststories.json")

  askstories: [Int]
    @rest(endpoint: "https://hacker-news.firebaseio.com/v0/askstories.json")

  showstories: [Int]
    @rest(endpoint: "https://hacker-news.firebaseio.com/v0/showstories.json")

  jobstories: [Int]
    @rest(endpoint: "https://hacker-news.firebaseio.com/v0/jobstories.json")
}
